<?xml version="1.0" encoding="UTF-8" ?>


<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.harvey.mapper.BillMapper"><!--名字写代理接口-->


    <resultMap id="BillMap" type="Bill">
        <result column="id" property="id"/>
        <result column="gb_bill_id" property="id"/>
        <result column="union_price" property="price"/>
        <result column="customer_id" property="customerId"/>
        <result column="customer" property="customerId"/>
        <result column="bill_date" property="billDate" />
        <result column="union_count" property="count"/>
    </resultMap>
    <!---->

    <insert id="addBill" useGeneratedKeys="true" keyProperty="id">
        insert into bill(customer_id,bill_date)
        values(#{customerId},#{billDate});
    </insert>
    <insert id="addGoods" useGeneratedKeys="true" >
        insert into good_bill(bill_id,good_id,count)
        value
        <foreach
                collection="list"
                item="each"
                separator=",">
            (#{each.billId},#{each.goodId},#{each.count})
        </foreach>
    </insert>

    <delete id="delById">
        delete from bill where
        id = #{id}
    </delete>

    <delete id="delByIds">
        delete from bill where
        id in
        <foreach
                collection="array"
                item="id"
                separator=","
                open="("
                close=")">
            #{id}
        </foreach>
        ;
        <!--删除了个寂寞也是删,离谱-->
    </delete>

    <update id="update">
        update bill
        <set>
            <!--↓这里用and而不是&&-->
            <if test="customerId!=null and customerId!= '' ">
                customer_id = #{customerId},
            </if>
            <if test="billDate!=null and billDate!=''">
                bill_date = #{billDate}
            </if>
        </set>
        where
        id=#{id}
        ;
        <!--如果good不写id,id默认为0,会删除id = 0 的 商品 不符合-->
    </update>

    <update id="updateByMessage">
        update bill
        <set>
            <!--↓这里用and而不是&&-->
            <if test="customerId!=null and customerId!= '' ">
                customer_id = #{customerId},
            </if>
            <if test="billData!=null and billData!=''">
                bill_date = #{billDate},
            </if>
        </set>
        where
        id=#{id}
        ;
        <!--如果good不写id,id默认为0,会删除id = 0 的 商品 不符合-->

    </update>

    <!--id是这一句命令的唯一标识,不能重复-->
    <select id="selectAll" resultMap="BillMap"><!--起了别名之后就方便了-->
        select gb.bill_id gb_bill_id,
        (select b.customer_id
        from bill b
        where b.id = gb.bill_id
        ) customer,
        sum(gb.count) union_count,
        sum(gb.count * (select g.price
        from good g
        where g.id = gb.good_id)
        ) as union_price
        from good_bill gb
        group by gb.bill_id;
    </select>


    <select id="selectById" parameterType="Integer" resultMap="BillMap">
        select gb.bill_id gb_bill_id,
        (select b.customer_id
        from bill b
        where b.id = gb.bill_id
        ) customer,
        sum(gb.count) union_count,
        sum(gb.count * (select g.price
        from good g
        where g.id = gb.good_id)
        ) as union_price
        from good_bill gb
        where bill_id like concat('%',#{id},'%')
        group by gb.bill_id;
    </select>

    <select id="selectByIds" resultMap="BillMap">
        select gb.bill_id gb_bill_id,
        (select b.customer_id
        from bill b
        where b.id = gb.bill_id
        ) customer,
        sum(gb.count) union_count,
        sum(gb.count * (select g.price
        from good g
        where g.id = gb.good_id)
        ) as union_price
        from good_bill gb
        where
        <foreach
                collection="array"
                item="id"
                separator=" or ">
            bill_id like concat('%',#{id},'%')
        </foreach>
        group by gb.bill_id;
    </select>


    <select id="selectByCustomerId" resultMap="BillMap">
        select gb.bill_id gb_bill_id,
        (select b.customer_id
        from bill b
        where b.id = gb.bill_id
        ) customer,
        sum(gb.count) union_count,
        sum(gb.count * (select g.price
        from good g
        where g.id = gb.good_id)
        ) as union_price
        from good_bill gb
        where (select b.customer_id
        from bill b
        where b.id = gb.bill_id
        ) like concat('%',#{customerId},'%')
        group by gb.bill_id;
    </select>

    <select id="selectByCustomerIds" resultMap="BillMap">
        select gb.bill_id gb_bill_id,
        (select b.customer_id
        from bill b
        where b.id = gb.bill_id
        ) customer,
        sum(gb.count) union_count,
        sum(gb.count * (select g.price
        from good g
        where g.id = gb.good_id)
        ) as union_price
        from good_bill gb
        where

        <foreach
                collection="array"
                item="customerId"
                separator=" or ">
            (select b.customer_id
            from bill b
            where b.id = gb.bill_id
            ) like concat('%',#{customerId},'%')
        </foreach>
        group by gb.bill_id;
    </select>


    <select id="orderByAsc" resultMap="BillMap">
        select gb.bill_id gb_bill_id,
        (select b.customer_id
        from bill b
        where b.id = gb.bill_id) customer,
        sum(gb.count) union_count,
        sum(gb.count * (select g.price
        from good g
        where g.id = gb.good_id)
        ) as union_price
        from good_bill gb
        group by gb.bill_id
        order by
        <choose>
            <when test="column == 'COUNT'">
                count
            </when>
            <when test="column == 'CUSTOMER_ID'">
                customer
            </when>
            <when test="column == 'PRICE'">
                union_price
            </when>
            <when test="column == 'BILL_DATE'">
                bill_date
            </when>
            <otherwise>
                gb.bill_id
            </otherwise>
        </choose>
        asc;
    </select>
    <select id="orderByDesc" resultMap="BillMap">
        select gb.bill_id gb_bill_id,
        (select b.customer_id
        from bill b
        where b.id = gb.bill_id) customer,
        sum(gb.count) union_count,
        sum(gb.count * (select g.price
        from good g
        where g.id = gb.good_id)
        ) as union_price
        from good_bill gb
        group by gb.bill_id
        order by
        <choose>
            <when test="column == 'COUNT'">
                count
            </when>
            <when test="column == 'CUSTOMER_ID'">
                customer
            </when>
            <when test="column == 'PRICE'">
                union_price
            </when>
            <when test="column == 'BILL_DATE'">
                bill_date
            </when>
            <otherwise>
                gb.bill_id
            </otherwise>
        </choose>
        desc;
    </select>

    <select id="dividePage" resultMap="BillMap">
        select gb.bill_id gb_bill_id,
        (select b.customer_id
        from bill b
        where b.id = gb.bill_id) customer,
        sum(gb.count) union_count,
        sum(gb.count * (select g.price
        from good g
        where g.id = gb.good_id)
        ) as union_price
        from good_bill gb
        group by gb.bill_id
        limit #{start},#{len};
    </select>

    <select id="getLen" resultType="int">
        select count(*) from bill
    </select>
    <select id="selectGoods" resultMap="GoodMap">
        select g.id, g.name, g.price, g.stock
        from good g
        where g.id in (select gb.good_id
        from good_bill gb
        where gb.bill_id like concat('%',#{billId},'%'));
    </select>

    <resultMap id="GoodMap" type="Good">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="price" property="price"/>
        <result column="stock" property="stock"/>
    </resultMap>

</mapper>